MONOLITHIC ARCHITECTURE
┌────────────────────────────────────────────┐
│              Single Application            │
│ ┌────────┬──────────┬─────────┬──────────┐ │
│ │ Login  │ Product  │ Orders  │ Payments │ │
│ └────────┴──────────┴─────────┴──────────┘ │
│     ➤ One database, one deployment         │
└────────────────────────────────────────────┘
          ▲
          │ Entire app scales as one
          ▼
    Hard to maintain, test, and scale


MICROSERVICES ARCHITECTURE
┌──────────────┐   ┌──────────────┐   ┌──────────────┐
│ Login Service│   │ Product Svc  │   │ Order Svc    │
└────┬─────────┘   └────┬─────────┘   └────┬──────────┘
     │                  │                  │
┌────▼─────┐      ┌─────▼─────┐      ┌─────▼─────┐
│ DB_Login │      │ DB_Product│      │ DB_Order  │
└──────────┘      └───────────┘      └───────────┘

✅ Scalable independently
✅ Technology agnostic
✅ Resilient & fault-tolerant
✅ Teams can work in parallel


=========================================

| #   | Benefit                                    | Explanation                                                                                                                           |
| --- | ------------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------- |
| 1️⃣ | **Scalability**                            | Each microservice can be scaled independently based on its demand (e.g., scale `OrderService` without scaling the entire app).        |
| 2️⃣ | **Faster Development & Deployment**        | Teams can work independently on different services and deploy them without affecting others (supports **CI/CD**).                     |
| 3️⃣ | **Technology Flexibility**                 | Each microservice can use a different tech stack (Java, Node.js, Python) based on use case.                                           |
| 4️⃣ | **Improved Fault Isolation**               | A failure in one service (e.g., `NotificationService`) doesn’t crash the whole system.                                                |
| 5️⃣ | **Better Maintainability**                 | Smaller codebases are easier to understand, test, and modify.                                                                         |
| 6️⃣ | **Reusability**                            | Microservices like `AuthService` or `PaymentService` can be reused across multiple applications.                                      |
| 7️⃣ | **Easier Testing**                         | Microservices can be tested independently using unit and integration tests.                                                           |
| 8️⃣ | **Continuous Delivery**                    | Enables rapid releases and rollbacks using tools like Docker, Kubernetes, and Jenkins.                                                |
| 9️⃣ | **Organized Around Business Capabilities** | Services represent business units (e.g., Billing, Order, Inventory) which aligns with domain-driven design.                           |
| 🔟  | **Cloud-Native Ready**                     | Fits perfectly with modern cloud platforms (AWS, Azure, GCP), supports autoscaling, containerization, and orchestration (Kubernetes). |

=====================================

| #   | Disadvantage                | Banking Example                                      |
| --- | --------------------------- | ---------------------------------------------------- |
| 1️⃣ | Inter-Service Communication | Fund transfer fails to trigger customer notification |
| 2️⃣ | Data Inconsistency          | Loan partially saved across services                 |
| 3️⃣ | Operational Overhead        | Restarting one faulty service among 50+              |
| 4️⃣ | Difficult Testing           | End-to-end flow needs complex service orchestration  |
| 5️⃣ | Security Concerns           | Unsecured API leaks account data                     |
=========================================================
Service Discovery:
=================

In microservices architecture, Service Discovery is the mechanism that allows microservices to find and communicate with each other dynamically,
without hardcoding the network locations (IP and port) of each service.


| Component            | Description                                                                                                                 |
| -------------------- | --------------------------------------------------------------------------------------------------------------------------- |
| **Service Registry** | Central directory that keeps track of service instances and metadata.<br>📘 Examples: **Eureka**, **Consul**, **Zookeeper** |
| **Service Provider** | Microservice that registers itself with the service registry on startup.                                                    |
| **Service Consumer** | Microservice that queries the registry to find and call another service.                                                    |


=============================

### 📘 **API Gateway – Definition**

An **API Gateway** is a **server** that acts as a **single entry point** for all client requests in a microservices architecture. 
It routes requests to the appropriate microservice, handles common cross-cutting concerns like **authentication**,
**rate limiting**, **logging**, and **response transformation**, and provides a **unified interface** to the client.

---

### ✅ **Key Responsibilities of API Gateway**

| Feature                             | Description                                                                            |
| ----------------------------------- | -------------------------------------------------------------------------------------- |
| **Routing**                         | Forwards client requests to the appropriate backend microservice based on the URL path |
| **Authentication & Authorization**  | Verifies tokens (like JWT) and controls access to services                             |
| **Rate Limiting & Throttling**      | Protects services from being overwhelmed by too many requests                          |
| **Load Balancing**                  | Distributes traffic across multiple service instances                                  |
| **Request/Response Transformation** | Modifies headers, payloads, or formats as needed                                       |
| **Aggregation**                     | Combines results from multiple microservices into a single response                    |
| **Logging & Monitoring**            | Captures traffic logs, request metrics, and error traces                               |

---

### 🛠️ **Popular API Gateway Tools**

| Tool                     | Description                                             |
| ------------------------ | ------------------------------------------------------- |
| **Spring Cloud Gateway** | Lightweight gateway for Spring Boot microservices       |
| **Kong**                 | Cloud-native, scalable API gateway                      |
| **AWS API Gateway**      | Managed gateway service in Amazon Web Services          |
| **NGINX**                | Can be configured as an API Gateway with load balancing |
| **Zuul** (Netflix OSS)   | Older Spring Cloud gateway (now replaced by SCG)        |

---

### 🏦 **Real-Time Example in Banking**

In a digital banking application:

* The **Mobile App** sends all API calls (Login, Account Info, Payments) to the **API Gateway**
* The gateway:

  * Authenticates the JWT token
  * Routes `/api/accounts` to `Account-Service`
  * Routes `/api/transactions` to `Transaction-Service`
  * Aggregates balance + transaction data for a dashboard
  * Logs the request and response details

---



